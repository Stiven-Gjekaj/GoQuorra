// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// This is a simplified version for the MVP

package grpc

import (
	"context"

	"google.golang.org/grpc"
)

// WorkerServiceClient is the client API for WorkerService
type WorkerServiceClient interface {
	LeaseJobs(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (WorkerService_LeaseJobsClient, error)
	AckJob(ctx context.Context, in *JobAck, opts ...grpc.CallOption) (*JobAckResponse, error)
	NackJob(ctx context.Context, in *JobAck, opts ...grpc.CallOption) (*JobAckResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) LeaseJobs(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (WorkerService_LeaseJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerService_ServiceDesc.Streams[0], "/quorra.WorkerService/LeaseJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerServiceLeaseJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkerService_LeaseJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type workerServiceLeaseJobsClient struct {
	grpc.ClientStream
}

func (x *workerServiceLeaseJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerServiceClient) AckJob(ctx context.Context, in *JobAck, opts ...grpc.CallOption) (*JobAckResponse, error) {
	out := new(JobAckResponse)
	err := c.cc.Invoke(ctx, "/quorra.WorkerService/AckJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) NackJob(ctx context.Context, in *JobAck, opts ...grpc.CallOption) (*JobAckResponse, error) {
	out := new(JobAckResponse)
	err := c.cc.Invoke(ctx, "/quorra.WorkerService/NackJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService
type WorkerServiceServer interface {
	LeaseJobs(*LeaseRequest, WorkerService_LeaseJobsServer) error
	AckJob(context.Context, *JobAck) (*JobAckResponse, error)
	NackJob(context.Context, *JobAck) (*JobAckResponse, error)
}

type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) LeaseJobs(*LeaseRequest, WorkerService_LeaseJobsServer) error {
	return nil
}

func (UnimplementedWorkerServiceServer) AckJob(context.Context, *JobAck) (*JobAckResponse, error) {
	return nil, nil
}

func (UnimplementedWorkerServiceServer) NackJob(context.Context, *JobAck) (*JobAckResponse, error) {
	return nil, nil
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_LeaseJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServiceServer).LeaseJobs(m, &workerServiceLeaseJobsServer{stream})
}

type WorkerService_LeaseJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type workerServiceLeaseJobsServer struct {
	grpc.ServerStream
}

func (x *workerServiceLeaseJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkerService_AckJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AckJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quorra.WorkerService/AckJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AckJob(ctx, req.(*JobAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_NackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).NackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quorra.WorkerService/NackJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).NackJob(ctx, req.(*JobAck))
	}
	return interceptor(ctx, in, info, handler)
}

var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quorra.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckJob",
			Handler:    _WorkerService_AckJob_Handler,
		},
		{
			MethodName: "NackJob",
			Handler:    _WorkerService_NackJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LeaseJobs",
			Handler:       _WorkerService_LeaseJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/quorra.proto",
}
