name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: quorra
          POSTGRES_USER: quorra
          POSTGRES_PASSWORD: quorra
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Initialize database
      env:
        DATABASE_URL: postgres://quorra:quorra@localhost:5432/quorra?sslmode=disable
      run: |
        PGPASSWORD=quorra psql -h localhost -U quorra -d quorra -f scripts/init_db.sql

    - name: Run tests
      env:
        DATABASE_URL: postgres://quorra:quorra@localhost:5432/quorra?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build binaries
      run: |
        go build -v -o bin/quorra-server ./cmd/quorra-server
        go build -v -o bin/quorra-worker ./cmd/quorra-worker
        go build -v -o bin/quorractl ./cmd/quorractl

    - name: Build Docker image
      run: docker build -t goquorra:${{ github.sha }} .

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Start services with docker-compose
      run: |
        docker-compose -f deployments/docker-compose.yml up -d
        sleep 30

    - name: Run integration tests
      run: go test -v -tags=integration ./tests/...

    - name: Show logs on failure
      if: failure()
      run: docker-compose -f deployments/docker-compose.yml logs

    - name: Stop services
      if: always()
      run: docker-compose -f deployments/docker-compose.yml down -v
